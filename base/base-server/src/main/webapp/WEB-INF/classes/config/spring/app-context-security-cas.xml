<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!-- 放行的资源 -->
	<sec:http pattern="/core/login/**" security="none" />
	<sec:http pattern="/core/skin/**" security="none" />
	<sec:http pattern="/core/js/**" security="none" />
	<sec:http pattern="/core/common/**" security="none" />
	<sec:http pattern="/core/schema/**" security="none" />



	<!-- 6拦截的资源  after| position="CAS_FILTER"-->
	<sec:http entry-point-ref="casProcessingFilterEntryPoint"
		auto-config="true" access-denied-page="/error/403.jsp" servlet-api-provision="true">
		<sec:intercept-url pattern="/getSystemUserFacade/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<sec:intercept-url pattern="/**" access="ROLE_EVERYONE" />
		<sec:custom-filter ref="casProcessingFilter" after="CAS_FILTER" />
		<sec:logout invalidate-session="true" logout-url="/logout"
			logout-success-url="${als.cas.url}/logout?service=${als.framework.app.url}/main/menu.do" />
	</sec:http>
	
	
    <!-- 5进行登录凭证信息验证-->
	<bean id="casAuthenticationProvider"
		class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<property name="authenticationUserDetailsService" ref="authenticationUserDetailsService"/>
		<property name="serviceProperties" ref="serviceProperties"/> 
		<property name="ticketValidator">
			<bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
				<constructor-arg index="0" value="${als.cas.url}" />
			</bean>
		</property>
		<property name="key" value="an_id_for_this_auth_provider_only" />
		
	</bean> 
	<!-- authorities对应 CAS server的 登录属性， 在此设置到spirng security中，用于spring security的验证 -->
<bean id="authenticationUserDetailsService" class="com.billionsfinance.als.security.GrantedAuthorityFromAssertionAttributesUserDetailsServiceImpl">
<constructor-arg>
<array>
<value>authorities</value>
</array>
</constructor-arg>
<property name="sysCodeKey" value="SYSCODE"></property>
<property name="sysCode" value="${als.framework.syscode}"></property>
</bean>
<!--  
		<bean id="authenticationUserDetailsService"  
		class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">  
		 <property name="userDetailsService" ref="userDetailsService"/>  
		</bean> -->
	<!--4 cas认证过滤器 -->
	<bean id="casProcessingFilter"
		class="org.springframework.security.cas.web.CasAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="filterProcessesUrl" value="/j_spring_cas_security_check" />
	</bean>
	
	<!--3 认证管理器   -->
	<sec:authentication-manager alias="authenticationManager">
		 <sec:authentication-provider ref="casAuthenticationProvider" />
	</sec:authentication-manager>
	
	

	<!--2  服务地址相关信息 -->
	   <!-- 
        你需要添加一个 ServiceProperties bean，到你的application context里。 这表现你的CAS服务。 
        这里的service必须是一个由CasAuthenticationFilter监控的URL。 这个sendRenew默认是false，但如果你的程序特别敏感就应该设置成true。 这个参数作用是，告诉CAS登录服务，一个单点登录没有到达。 否则，用户需要重新输入                他们的用户名和密码，来获得访问服务的权限。 
    -->
	<bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
		<property name="service"
			value="${als.framework.app.url}/j_spring_cas_security_check" />
		<property name="sendRenew" value="false" />
	</bean>


	<!-- 1 认证入口，当无对应的权限时跳转到对应的url -->
	<bean id="casProcessingFilterEntryPoint"
		class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<property name="loginUrl" value="${als.cas.url}/login" />
		<property name="serviceProperties" ref="serviceProperties" />
	</bean>

	<!-- 自定义UserDetailsService认证 
<bean id="userDetailsService" class="com.billionsfinance.als.security.UserDetailsServiceImpl"></bean> -->

</beans>